<?php

/**
 * @template T of object
 */
class ReflectionClass
{

	/**
	 * @readonly
	 * @var class-string<T>
	 */
	public $name;

	/**
	 * @param T|class-string<T> $argument
	 * @throws ReflectionException
	 */
	public function __construct($argument) {}

	/**
	 * @return class-string<T>
	 */
	public function getName() : string;

	/**
	 * @param mixed ...$args
	 *
	 * @return T
	 */
	public function newInstance(...$args) {}

	/**
	 * @param array<int|string, mixed> $args
	 *
	 * @return T
	 */
	public function newInstanceArgs(array $args) {}

	/**
	 * @return T
	 */
	public function newInstanceWithoutConstructor();

	/**
	 * @return list<ReflectionAttribute<object>>
	 */
	public function getAttributes(?string $name = null, int $flags = 0)
	{
	}

	/**
	 * @param callable(T): void $initializer
	 * @return T
	 */
	public function newLazyGhost(callable $initializer, int $options = 0): object
	{
	}

	/**
	 * @param callable(T): T $factory
	 * @return T
	 */
	public function newLazyProxy(callable $factory, int $options = 0): object
	{
	}

	/**
	 * @param T $object
	 * @param callable(T): void $initializer
	 */
	public function resetAsLazyGhost(object $object, callable $initializer, int $options = 0): void
	{
	}

	/**
	 * @param T $object
	 * @param callable(T): T $factory
	 */
	public function resetAsLazyProxy(object $object, callable $factory, int $options = 0): void
	{
	}

	/**
	 * @param T $object
	 * @return T
	 */
	public function initializeLazyObject(object $object): object
	{
	}

	/**
	 * @param T $object
	 * @return T
	 */
	public function markLazyObjectAsInitialized(object $object): object
	{
	}

	/**
	 * @param T $object
	 */
	public function getLazyInitializer(object $object): ?callable
	{
	}

	/**
	 * @param T $object
	 */
	public function isUninitializedLazyObject(object $object): bool
	{
	}
}
